AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for SQL Server to Amazon S3 replication with DMS

Parameters:
  SourceEndpoint:
    Type: String
    Description: SQL Server endpoint details (e.g., endpoint, port, username, password)
  SourcePort:
    Type: Number
    Description: SQL Server endpoint details (e.g., endpoint, port, username, password)
  SourceUsername:
    Type: String
    Description: SQL Server endpoint details (e.g., endpoint, port, username, password)
  SourcePassword:
    Type: String
    Description: SQL Server endpoint details (e.g., endpoint, port, username, password)
  SourceDatabasename:
    Type: String
    Description: SQL Server endpoint details (e.g., endpoint, port, username, password)
  TargetBucket:
    Type: String
    Description: Amazon S3 bucket name for storing Parquet files

Resources:
  DMSReplicationInstance:
    Type: AWS::DMS::ReplicationInstance
    Properties:
      ReplicationInstanceIdentifier: MyDMSReplicationInstance
      ReplicationInstanceClass: dms.t3.micro
      AllocatedStorage: 50
      EngineVersion: 3.5.1
      PubliclyAccessible: false
      MultiAZ: false
  
  DMSReplicationSourceEndpoint:
    Type: AWS::DMS::Endpoint
    Properties:
      EndpointIdentifier: SourceSQLServer
      EndpointType: source
      EngineName: sqlserver
      Username: !Ref SourceUsername
      Password: !Ref SourcePassword
      ServerName: !Ref SourceEndpoint
      Port: !Ref SourcePort
      DatabaseName: !Ref SourceDatabasename
  
  DMSReplicationTargetEndpoint:
    Type: AWS::DMS::Endpoint
    Properties:
      EndpointIdentifier: TargetS3Bucket
      EndpointType: target
      EngineName: s3
      S3Settings:
        ServiceAccessRoleArn: arn:aws:iam::${AWS::AccountId}:role/DMSTargetS3Role
        BucketName: !Ref TargetBucket

  DMSTargetS3Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DMSTargetS3RoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: dms.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DMSTargetS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource: "arn:aws:s3:::YourS3BucketName/*"
              - Effect: Allow
                Action: "s3:ListBucket"
                Resource: "arn:aws:s3:::YourS3BucketName"



#   DMSRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: dms.amazonaws.com
#             Action: sts:AssumeRole
#       ManagedPolicyArns:
#         - arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole
#       Policies:
#         - PolicyName: DMSAccessS3
#           PolicyDocument:
#             Version: '2012-10-17'
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - s3:ListBucket
#                   - s3:GetBucketLocation
#                 Resource: !Sub "arn:aws:s3:::${TargetBucket}"
#               - Effect: Allow
#                 Action:
#                   - s3:PutObject
#                   - s3:DeleteObject
#                   - s3:GetObject
#                 Resource: !Sub "arn:aws:s3:::${TargetBucket}/*"

#   DMSReplicationTask:
#     Type: AWS::DMS::ReplicationTask
#     Properties:
#       SourceEndpointArn: !Sub "arn:aws:dms:${AWS::Region}:${AWS::AccountId}:endpoint:${DMSReplicationInstance}:${SourceEndpoint}"
#       TargetEndpointArn: !Sub "arn:aws:dms:${AWS::Region}:${AWS::AccountId}:endpoint:s3-sa-east-1"
#       MigrationType: "full-load-and-cdc"
#       TableMappings: |
#         {
#           "rules": [
#             {
#               "rule-type": "selection",
#               "rule-id": "1",
#               "rule-name": "1",
#               "object-locator": {
#                 "schema-name": "%",
#                 "table-name": "%"
#               },
#               "rule-action": "include"
#             }
#           ]
#         }
#       ReplicationTaskSettings: "{\"TargetMetadata\": {\"BucketName\": \"${TargetBucket}\",\"Format\": \"parquet\"}}"

#   LambdaFunction:
#     Type: AWS::Lambda::Function
#     Properties:
#       FunctionName: DMSReplicationTrigger
#       Runtime: python3.8
#       Timeout: 60
#       Handler: index.lambda_handler
#       Role: !GetAtt DMSRole.Arn
#       Code:
#         ZipFile: |
#           import boto3

#           def lambda_handler(event, context):
#               dms_client = boto3.client('dms', region_name='us-east-1')
#               response = dms_client.start_replication_task(
#                   ReplicationTaskArn='ARN_OF_DMS_REPLICATION_TASK',
#                   StartReplicationTaskType='start-replication'
#               )
#               return response

# Outputs:
#   DMSReplicationInstanceEndpoint:
#     Description: SQL Server replication instance endpoint
#     Value: !GetAtt DMSReplicationInstance.Endpoint.Address
#   LambdaFunctionArn:
#     Description: Lambda function ARN for triggering DMS replication
#     Value: !GetAtt LambdaFunction.Arn
